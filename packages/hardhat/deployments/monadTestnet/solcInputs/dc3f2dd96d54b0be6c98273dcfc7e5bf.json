{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/MatchRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title 比赛报名合约\n * @dev 开启关闭报名，接受用户报名，获取报名列表。\n */\ncontract MatchRegistry is Ownable {\n\n    // --- 状态变量 ---\n\n    // 当前比赛ID\n    uint256 public currentMatchId;      \n    // 报名是否开启\n    bool public registrationOpen;       \n\n    // 每场比赛的报名列表\n    // 映射：比赛ID => 报名地址 => 是否报名，用于快速检查某个地址是否报名\n    mapping(uint256 => mapping(address => bool)) public isCandidateForMatch;\n    // 映射：比赛ID => 报名地址列表，用于获取报名列表\n    mapping(uint256 => address[]) internal _candidatesForMatch;\n\n    // --- 事件 ---\n\n    event RegistrationOpened(uint256 indexed matchId, uint256 openedAtTimestamp);\n    event RegistrationClosed(uint256 indexed matchId, uint256 closedAtTimestamp);\n    event FighterRegistered(uint256 indexed matchId, address indexed fighter, uint256 registrationTime);\n\n    // --- 构造函数 ---\n\n    constructor(address _initialOwner) Ownable(_initialOwner) {\n        currentMatchId = 0; // 初始化为无比赛\n        registrationOpen = false;\n    }\n\n    // --- 所有者函数 ---\n\n    /**\n     * @dev 为新的比赛开启报名\n     * 增加currentMatchId并开启报名\n     */\n    function openNewMatchRegistration() external onlyOwner {\n        // 如果之前报名是开启的，则关闭\n        if (registrationOpen && currentMatchId > 0) {\n             emit RegistrationClosed(currentMatchId, block.timestamp);\n        }\n        \n        // 开启新的比赛报名\n        currentMatchId++; \n        registrationOpen = true;\n\n        // 清除新matchId的报名列表\n        delete _candidatesForMatch[currentMatchId];\n\n        emit RegistrationOpened(currentMatchId, block.timestamp);\n    }\n\n    /**\n     * @dev 关闭当前比赛的报名\n     */\n    function closeCurrentMatchRegistration() external onlyOwner {\n        require(currentMatchId > 0, \"MatchRegistry: No match has been opened yet.\");\n        require(registrationOpen, \"MatchRegistry: Registration is already closed for the current match.\");\n        \n        registrationOpen = false;\n        emit RegistrationClosed(currentMatchId, block.timestamp);\n    }\n\n    // --- 公共/外部函数 ---\n\n    /**\n     * @dev 用户报名\n     */\n    function registerAsFighter() external { \n        require(currentMatchId > 0, \"MatchRegistry: No match is currently open for registration.\");\n        require(registrationOpen, \"MatchRegistry: Registration is currently closed.\");\n        \n        // 检查是否已经报名\n        require(\n            !isCandidateForMatch[currentMatchId][msg.sender],\n            \"MatchRegistry: You are already registered for this match.\"\n        );\n\n        // 设置报名状态\n        isCandidateForMatch[currentMatchId][msg.sender] = true;\n        _candidatesForMatch[currentMatchId].push(msg.sender);\n\n        emit FighterRegistered(currentMatchId, msg.sender, block.timestamp);\n    }\n\n    // --- 视图函数 ---\n\n    /**\n     * @dev 获取当前比赛ID的报名列表\n     * @return 报名地址列表\n     */\n    function getCurrentCandidatePool() external view returns (address[] memory) {\n        if (currentMatchId == 0) {\n            return new address[](0);\n        }\n        return _candidatesForMatch[currentMatchId];\n    }\n\n    /**\n     * @dev 获取特定比赛ID的报名列表\n     * @param _matchId 比赛ID\n     * @return 该比赛的报名地址列表\n     */\n    function getCandidatePoolForMatch(uint256 _matchId) external view returns (address[] memory) {\n        return _candidatesForMatch[_matchId];\n    }\n\n    /**\n     * @dev 检查用户是否报名了某个比赛\n     * @param _matchId 比赛ID\n     * @param _candidate 要检查的地址\n     * @return 如果报名了，则为true，否则为false\n     */\n    function isCandidate(uint256 _matchId, address _candidate) external view returns (bool) {\n        return isCandidateForMatch[_matchId][_candidate];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}