{
  "address": "0xC1C2De6ee01F1Ae11C2fee2d4b0b4b42Fa5F930c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "matchId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fighter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "registrationTime",
          "type": "uint256"
        }
      ],
      "name": "FighterRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "matchId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "closedAtTimestamp",
          "type": "uint256"
        }
      ],
      "name": "RegistrationClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "matchId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openedAtTimestamp",
          "type": "uint256"
        }
      ],
      "name": "RegistrationOpened",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "closeCurrentMatchRegistration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentMatchId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_matchId",
          "type": "uint256"
        }
      ],
      "name": "getCandidatePoolForMatch",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentCandidatePool",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_matchId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_candidate",
          "type": "address"
        }
      ],
      "name": "isCandidate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isCandidateForMatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openNewMatchRegistration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerAsFighter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrationOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1bca085e5b55995b8934dd9fbb610e7bcaf39eb4039e1ddfdc19cc30c43b8769",
  "receipt": {
    "to": null,
    "from": "0x8d6184D01C461d53044094c6e8850bf60604dDA2",
    "contractAddress": "0xC1C2De6ee01F1Ae11C2fee2d4b0b4b42Fa5F930c",
    "transactionIndex": 6,
    "gasUsed": "586849",
    "logsBloom": "0x
    "blockHash": "0x4a862dba6c71d0571fac74e991aa488b62d20668bf7fba6321d8a46b7244535e",
    "transactionHash": "0x1bca085e5b55995b8934dd9fbb610e7bcaf39eb4039e1ddfdc19cc30c43b8769",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 20627928,
        "transactionHash": "0x1bca085e5b55995b8934dd9fbb610e7bcaf39eb4039e1ddfdc19cc30c43b8769",
        "address": "0xC1C2De6ee01F1Ae11C2fee2d4b0b4b42Fa5F930c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008d6184d01c461d53044094c6e8850bf60604dda2"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0x4a862dba6c71d0571fac74e991aa488b62d20668bf7fba6321d8a46b7244535e"
      }
    ],
    "blockNumber": 20627928,
    "cumulativeGasUsed": "2260830",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8d6184D01C461d53044094c6e8850bf60604dDA2"
  ],
  "numDeployments": 1,
  "solcInputHash": "dc3f2dd96d54b0be6c98273dcfc7e5bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fighter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationTime\",\"type\":\"uint256\"}],\"name\":\"FighterRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"closedAtTimestamp\",\"type\":\"uint256\"}],\"name\":\"RegistrationClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"matchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openedAtTimestamp\",\"type\":\"uint256\"}],\"name\":\"RegistrationOpened\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"closeCurrentMatchRegistration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMatchId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_matchId\",\"type\":\"uint256\"}],\"name\":\"getCandidatePoolForMatch\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentCandidatePool\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_matchId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_candidate\",\"type\":\"address\"}],\"name\":\"isCandidate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCandidateForMatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openNewMatchRegistration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerAsFighter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"\\u5f00\\u542f\\u5173\\u95ed\\u62a5\\u540d\\uff0c\\u63a5\\u53d7\\u7528\\u6237\\u62a5\\u540d\\uff0c\\u83b7\\u53d6\\u62a5\\u540d\\u5217\\u8868\\u3002\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"closeCurrentMatchRegistration()\":{\"details\":\"\\u5173\\u95ed\\u5f53\\u524d\\u6bd4\\u8d5b\\u7684\\u62a5\\u540d\"},\"getCandidatePoolForMatch(uint256)\":{\"details\":\"\\u83b7\\u53d6\\u7279\\u5b9a\\u6bd4\\u8d5bID\\u7684\\u62a5\\u540d\\u5217\\u8868\",\"params\":{\"_matchId\":\"\\u6bd4\\u8d5bID\"},\"returns\":{\"_0\":\"\\u8be5\\u6bd4\\u8d5b\\u7684\\u62a5\\u540d\\u5730\\u5740\\u5217\\u8868\"}},\"getCurrentCandidatePool()\":{\"details\":\"\\u83b7\\u53d6\\u5f53\\u524d\\u6bd4\\u8d5bID\\u7684\\u62a5\\u540d\\u5217\\u8868\",\"returns\":{\"_0\":\"\\u62a5\\u540d\\u5730\\u5740\\u5217\\u8868\"}},\"isCandidate(uint256,address)\":{\"details\":\"\\u68c0\\u67e5\\u7528\\u6237\\u662f\\u5426\\u62a5\\u540d\\u4e86\\u67d0\\u4e2a\\u6bd4\\u8d5b\",\"params\":{\"_candidate\":\"\\u8981\\u68c0\\u67e5\\u7684\\u5730\\u5740\",\"_matchId\":\"\\u6bd4\\u8d5bID\"},\"returns\":{\"_0\":\"\\u5982\\u679c\\u62a5\\u540d\\u4e86\\uff0c\\u5219\\u4e3atrue\\uff0c\\u5426\\u5219\\u4e3afalse\"}},\"openNewMatchRegistration()\":{\"details\":\"\\u4e3a\\u65b0\\u7684\\u6bd4\\u8d5b\\u5f00\\u542f\\u62a5\\u540d \\u589e\\u52a0currentMatchId\\u5e76\\u5f00\\u542f\\u62a5\\u540d\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerAsFighter()\":{\"details\":\"\\u7528\\u6237\\u62a5\\u540d\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"\\u6bd4\\u8d5b\\u62a5\\u540d\\u5408\\u7ea6\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MatchRegistry.sol\":\"MatchRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/MatchRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title \\u6bd4\\u8d5b\\u62a5\\u540d\\u5408\\u7ea6\\n * @dev \\u5f00\\u542f\\u5173\\u95ed\\u62a5\\u540d\\uff0c\\u63a5\\u53d7\\u7528\\u6237\\u62a5\\u540d\\uff0c\\u83b7\\u53d6\\u62a5\\u540d\\u5217\\u8868\\u3002\\n */\\ncontract MatchRegistry is Ownable {\\n\\n    // --- \\u72b6\\u6001\\u53d8\\u91cf ---\\n\\n    // \\u5f53\\u524d\\u6bd4\\u8d5bID\\n    uint256 public currentMatchId;      \\n    // \\u62a5\\u540d\\u662f\\u5426\\u5f00\\u542f\\n    bool public registrationOpen;       \\n\\n    // \\u6bcf\\u573a\\u6bd4\\u8d5b\\u7684\\u62a5\\u540d\\u5217\\u8868\\n    // \\u6620\\u5c04\\uff1a\\u6bd4\\u8d5bID => \\u62a5\\u540d\\u5730\\u5740 => \\u662f\\u5426\\u62a5\\u540d\\uff0c\\u7528\\u4e8e\\u5feb\\u901f\\u68c0\\u67e5\\u67d0\\u4e2a\\u5730\\u5740\\u662f\\u5426\\u62a5\\u540d\\n    mapping(uint256 => mapping(address => bool)) public isCandidateForMatch;\\n    // \\u6620\\u5c04\\uff1a\\u6bd4\\u8d5bID => \\u62a5\\u540d\\u5730\\u5740\\u5217\\u8868\\uff0c\\u7528\\u4e8e\\u83b7\\u53d6\\u62a5\\u540d\\u5217\\u8868\\n    mapping(uint256 => address[]) internal _candidatesForMatch;\\n\\n    // --- \\u4e8b\\u4ef6 ---\\n\\n    event RegistrationOpened(uint256 indexed matchId, uint256 openedAtTimestamp);\\n    event RegistrationClosed(uint256 indexed matchId, uint256 closedAtTimestamp);\\n    event FighterRegistered(uint256 indexed matchId, address indexed fighter, uint256 registrationTime);\\n\\n    // --- \\u6784\\u9020\\u51fd\\u6570 ---\\n\\n    constructor(address _initialOwner) Ownable(_initialOwner) {\\n        currentMatchId = 0; // \\u521d\\u59cb\\u5316\\u4e3a\\u65e0\\u6bd4\\u8d5b\\n        registrationOpen = false;\\n    }\\n\\n    // --- \\u6240\\u6709\\u8005\\u51fd\\u6570 ---\\n\\n    /**\\n     * @dev \\u4e3a\\u65b0\\u7684\\u6bd4\\u8d5b\\u5f00\\u542f\\u62a5\\u540d\\n     * \\u589e\\u52a0currentMatchId\\u5e76\\u5f00\\u542f\\u62a5\\u540d\\n     */\\n    function openNewMatchRegistration() external onlyOwner {\\n        // \\u5982\\u679c\\u4e4b\\u524d\\u62a5\\u540d\\u662f\\u5f00\\u542f\\u7684\\uff0c\\u5219\\u5173\\u95ed\\n        if (registrationOpen && currentMatchId > 0) {\\n             emit RegistrationClosed(currentMatchId, block.timestamp);\\n        }\\n        \\n        // \\u5f00\\u542f\\u65b0\\u7684\\u6bd4\\u8d5b\\u62a5\\u540d\\n        currentMatchId++; \\n        registrationOpen = true;\\n\\n        // \\u6e05\\u9664\\u65b0matchId\\u7684\\u62a5\\u540d\\u5217\\u8868\\n        delete _candidatesForMatch[currentMatchId];\\n\\n        emit RegistrationOpened(currentMatchId, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev \\u5173\\u95ed\\u5f53\\u524d\\u6bd4\\u8d5b\\u7684\\u62a5\\u540d\\n     */\\n    function closeCurrentMatchRegistration() external onlyOwner {\\n        require(currentMatchId > 0, \\\"MatchRegistry: No match has been opened yet.\\\");\\n        require(registrationOpen, \\\"MatchRegistry: Registration is already closed for the current match.\\\");\\n        \\n        registrationOpen = false;\\n        emit RegistrationClosed(currentMatchId, block.timestamp);\\n    }\\n\\n    // --- \\u516c\\u5171/\\u5916\\u90e8\\u51fd\\u6570 ---\\n\\n    /**\\n     * @dev \\u7528\\u6237\\u62a5\\u540d\\n     */\\n    function registerAsFighter() external { \\n        require(currentMatchId > 0, \\\"MatchRegistry: No match is currently open for registration.\\\");\\n        require(registrationOpen, \\\"MatchRegistry: Registration is currently closed.\\\");\\n        \\n        // \\u68c0\\u67e5\\u662f\\u5426\\u5df2\\u7ecf\\u62a5\\u540d\\n        require(\\n            !isCandidateForMatch[currentMatchId][msg.sender],\\n            \\\"MatchRegistry: You are already registered for this match.\\\"\\n        );\\n\\n        // \\u8bbe\\u7f6e\\u62a5\\u540d\\u72b6\\u6001\\n        isCandidateForMatch[currentMatchId][msg.sender] = true;\\n        _candidatesForMatch[currentMatchId].push(msg.sender);\\n\\n        emit FighterRegistered(currentMatchId, msg.sender, block.timestamp);\\n    }\\n\\n    // --- \\u89c6\\u56fe\\u51fd\\u6570 ---\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u5f53\\u524d\\u6bd4\\u8d5bID\\u7684\\u62a5\\u540d\\u5217\\u8868\\n     * @return \\u62a5\\u540d\\u5730\\u5740\\u5217\\u8868\\n     */\\n    function getCurrentCandidatePool() external view returns (address[] memory) {\\n        if (currentMatchId == 0) {\\n            return new address[](0);\\n        }\\n        return _candidatesForMatch[currentMatchId];\\n    }\\n\\n    /**\\n     * @dev \\u83b7\\u53d6\\u7279\\u5b9a\\u6bd4\\u8d5bID\\u7684\\u62a5\\u540d\\u5217\\u8868\\n     * @param _matchId \\u6bd4\\u8d5bID\\n     * @return \\u8be5\\u6bd4\\u8d5b\\u7684\\u62a5\\u540d\\u5730\\u5740\\u5217\\u8868\\n     */\\n    function getCandidatePoolForMatch(uint256 _matchId) external view returns (address[] memory) {\\n        return _candidatesForMatch[_matchId];\\n    }\\n\\n    /**\\n     * @dev \\u68c0\\u67e5\\u7528\\u6237\\u662f\\u5426\\u62a5\\u540d\\u4e86\\u67d0\\u4e2a\\u6bd4\\u8d5b\\n     * @param _matchId \\u6bd4\\u8d5bID\\n     * @param _candidate \\u8981\\u68c0\\u67e5\\u7684\\u5730\\u5740\\n     * @return \\u5982\\u679c\\u62a5\\u540d\\u4e86\\uff0c\\u5219\\u4e3atrue\\uff0c\\u5426\\u5219\\u4e3afalse\\n     */\\n    function isCandidate(uint256 _matchId, address _candidate) external view returns (bool) {\\n        return isCandidateForMatch[_matchId][_candidate];\\n    }\\n}\\n\",\"keccak256\":\"0x49c41ce46890b2c7f07efdcffb671ba2d95bea318249e2d35a144b85eefc6a8a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a07380380610a0783398101604081905261002f916100cd565b806001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6100678161007d565b505060006001556002805460ff191690556100fd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100df57600080fd5b81516001600160a01b03811681146100f657600080fd5b9392505050565b6108fb8061010c6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063736f88cd11610071578063736f88cd1461014257806375a7e6b21461014f5780638da5cb5b14610188578063e4ead04a146101a3578063f0a9571b146101ab578063f2fde38b146101be57600080fd5b806303091fa1146100b95780634f069ef6146100fc57806353729af31461011357806360c355d8146101285780636890824314610132578063715018a61461013a575b600080fd5b6100e76100c73660046107ea565b600360209081526000928352604080842090915290825290205460ff1681565b60405190151581526020015b60405180910390f35b61010560015481565b6040519081526020016100f3565b61011b6101d1565b6040516100f39190610816565b61013061025b565b005b610130610398565b61013061045f565b6002546100e79060ff1681565b6100e761015d3660046107ea565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000546040516001600160a01b0390911681526020016100f3565b610130610473565b61011b6101b9366004610863565b610675565b6101306101cc36600461087c565b6106e1565b60606001546000036101f0575060408051600081526020810190915290565b6001546000908152600460209081526040918290208054835181840281018401909452808452909183018282801561025157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610233575b5050505050905090565b61026361071f565b6000600154116102cf5760405162461bcd60e51b815260206004820152602c60248201527f4d6174636852656769737472793a204e6f206d6174636820686173206265656e60448201526b1037b832b732b2103cb2ba1760a11b60648201526084015b60405180910390fd5b60025460ff166103555760405162461bcd60e51b8152602060048201526044602482018190527f4d6174636852656769737472793a20526567697374726174696f6e2069732061908201527f6c726561647920636c6f73656420666f72207468652063757272656e74206d616064820152633a31b41760e11b608482015260a4016102c6565b6002805460ff191690556001546040514281527f64d0f40aa47b2a1f62d09ad9f129aadd33f1cf29ccaf08d792f73dae63ab0ec2906020015b60405180910390a2565b6103a061071f565b60025460ff1680156103b457506000600154115b156103f0576001546040514281527f64d0f40aa47b2a1f62d09ad9f129aadd33f1cf29ccaf08d792f73dae63ab0ec29060200160405180910390a25b600180549060006104008361089e565b90915550506002805460ff1916600190811790915554600090815260046020526040812061042d9161079c565b6001546040514281527e92d3a0faf985375d3ea8563cdbdedd99bb694713af121204f50ccb198fb4769060200161038e565b61046761071f565b610471600061074c565b565b6000600154116104eb5760405162461bcd60e51b815260206004820152603b60248201527f4d6174636852656769737472793a204e6f206d6174636820697320637572726560448201527f6e746c79206f70656e20666f7220726567697374726174696f6e2e000000000060648201526084016102c6565b60025460ff166105565760405162461bcd60e51b815260206004820152603060248201527f4d6174636852656769737472793a20526567697374726174696f6e206973206360448201526f3ab93932b73a363c9031b637b9b2b21760811b60648201526084016102c6565b600154600090815260036020908152604080832033845290915290205460ff16156105e95760405162461bcd60e51b815260206004820152603960248201527f4d6174636852656769737472793a20596f752061726520616c7265616479207260448201527f65676973746572656420666f722074686973206d617463682e0000000000000060648201526084016102c6565b60018054600090815260036020908152604080832033808552908352818420805460ff1916861790558454845260048352818420805480870182559085529383902090930180546001600160a01b03191684179055925492514281529192917f866b4ce76d33a00550eefb50a26e4694a3446779d1bc155433373b7423ca6325910160405180910390a3565b6000818152600460209081526040918290208054835181840281018401909452808452606093928301828280156106d557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106b7575b50505050509050919050565b6106e961071f565b6001600160a01b03811661071357604051631e4fbdf760e01b8152600060048201526024016102c6565b61071c8161074c565b50565b6000546001600160a01b031633146104715760405163118cdaa760e01b81523360048201526024016102c6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b508054600082559060005260206000209081019061071c91905b808211156107ca57600081556001016107b6565b5090565b80356001600160a01b03811681146107e557600080fd5b919050565b600080604083850312156107fd57600080fd5b8235915061080d602084016107ce565b90509250929050565b6020808252825182820181905260009190848201906040850190845b818110156108575783516001600160a01b031683529284019291840191600101610832565b50909695505050505050565b60006020828403121561087557600080fd5b5035919050565b60006020828403121561088e57600080fd5b610897826107ce565b9392505050565b6000600182016108be57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220bf06e5ef69230d147dbcaa0a2487e2ea2e62f459751e307d316d1705c64c1dfc64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063736f88cd11610071578063736f88cd1461014257806375a7e6b21461014f5780638da5cb5b14610188578063e4ead04a146101a3578063f0a9571b146101ab578063f2fde38b146101be57600080fd5b806303091fa1146100b95780634f069ef6146100fc57806353729af31461011357806360c355d8146101285780636890824314610132578063715018a61461013a575b600080fd5b6100e76100c73660046107ea565b600360209081526000928352604080842090915290825290205460ff1681565b60405190151581526020015b60405180910390f35b61010560015481565b6040519081526020016100f3565b61011b6101d1565b6040516100f39190610816565b61013061025b565b005b610130610398565b61013061045f565b6002546100e79060ff1681565b6100e761015d3660046107ea565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6000546040516001600160a01b0390911681526020016100f3565b610130610473565b61011b6101b9366004610863565b610675565b6101306101cc36600461087c565b6106e1565b60606001546000036101f0575060408051600081526020810190915290565b6001546000908152600460209081526040918290208054835181840281018401909452808452909183018282801561025157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610233575b5050505050905090565b61026361071f565b6000600154116102cf5760405162461bcd60e51b815260206004820152602c60248201527f4d6174636852656769737472793a204e6f206d6174636820686173206265656e60448201526b1037b832b732b2103cb2ba1760a11b60648201526084015b60405180910390fd5b60025460ff166103555760405162461bcd60e51b8152602060048201526044602482018190527f4d6174636852656769737472793a20526567697374726174696f6e2069732061908201527f6c726561647920636c6f73656420666f72207468652063757272656e74206d616064820152633a31b41760e11b608482015260a4016102c6565b6002805460ff191690556001546040514281527f64d0f40aa47b2a1f62d09ad9f129aadd33f1cf29ccaf08d792f73dae63ab0ec2906020015b60405180910390a2565b6103a061071f565b60025460ff1680156103b457506000600154115b156103f0576001546040514281527f64d0f40aa47b2a1f62d09ad9f129aadd33f1cf29ccaf08d792f73dae63ab0ec29060200160405180910390a25b600180549060006104008361089e565b90915550506002805460ff1916600190811790915554600090815260046020526040812061042d9161079c565b6001546040514281527e92d3a0faf985375d3ea8563cdbdedd99bb694713af121204f50ccb198fb4769060200161038e565b61046761071f565b610471600061074c565b565b6000600154116104eb5760405162461bcd60e51b815260206004820152603b60248201527f4d6174636852656769737472793a204e6f206d6174636820697320637572726560448201527f6e746c79206f70656e20666f7220726567697374726174696f6e2e000000000060648201526084016102c6565b60025460ff166105565760405162461bcd60e51b815260206004820152603060248201527f4d6174636852656769737472793a20526567697374726174696f6e206973206360448201526f3ab93932b73a363c9031b637b9b2b21760811b60648201526084016102c6565b600154600090815260036020908152604080832033845290915290205460ff16156105e95760405162461bcd60e51b815260206004820152603960248201527f4d6174636852656769737472793a20596f752061726520616c7265616479207260448201527f65676973746572656420666f722074686973206d617463682e0000000000000060648201526084016102c6565b60018054600090815260036020908152604080832033808552908352818420805460ff1916861790558454845260048352818420805480870182559085529383902090930180546001600160a01b03191684179055925492514281529192917f866b4ce76d33a00550eefb50a26e4694a3446779d1bc155433373b7423ca6325910160405180910390a3565b6000818152600460209081526040918290208054835181840281018401909452808452606093928301828280156106d557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106b7575b50505050509050919050565b6106e961071f565b6001600160a01b03811661071357604051631e4fbdf760e01b8152600060048201526024016102c6565b61071c8161074c565b50565b6000546001600160a01b031633146104715760405163118cdaa760e01b81523360048201526024016102c6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b508054600082559060005260206000209081019061071c91905b808211156107ca57600081556001016107b6565b5090565b80356001600160a01b03811681146107e557600080fd5b919050565b600080604083850312156107fd57600080fd5b8235915061080d602084016107ce565b90509250929050565b6020808252825182820181905260009190848201906040850190845b818110156108575783516001600160a01b031683529284019291840191600101610832565b50909695505050505050565b60006020828403121561087557600080fd5b5035919050565b60006020828403121561088e57600080fd5b610897826107ce565b9392505050565b6000600182016108be57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220bf06e5ef69230d147dbcaa0a2487e2ea2e62f459751e307d316d1705c64c1dfc64736f6c63430008140033",
  "devdoc": {
    "details": "开启关闭报名，接受用户报名，获取报名列表。",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "closeCurrentMatchRegistration()": {
        "details": "关闭当前比赛的报名"
      },
      "getCandidatePoolForMatch(uint256)": {
        "details": "获取特定比赛ID的报名列表",
        "params": {
          "_matchId": "比赛ID"
        },
        "returns": {
          "_0": "该比赛的报名地址列表"
        }
      },
      "getCurrentCandidatePool()": {
        "details": "获取当前比赛ID的报名列表",
        "returns": {
          "_0": "报名地址列表"
        }
      },
      "isCandidate(uint256,address)": {
        "details": "检查用户是否报名了某个比赛",
        "params": {
          "_candidate": "要检查的地址",
          "_matchId": "比赛ID"
        },
        "returns": {
          "_0": "如果报名了，则为true，否则为false"
        }
      },
      "openNewMatchRegistration()": {
        "details": "为新的比赛开启报名 增加currentMatchId并开启报名"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerAsFighter()": {
        "details": "用户报名"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "比赛报名合约",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/MatchRegistry.sol:MatchRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 185,
        "contract": "contracts/MatchRegistry.sol:MatchRegistry",
        "label": "currentMatchId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 187,
        "contract": "contracts/MatchRegistry.sol:MatchRegistry",
        "label": "registrationOpen",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 193,
        "contract": "contracts/MatchRegistry.sol:MatchRegistry",
        "label": "isCandidateForMatch",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 198,
        "contract": "contracts/MatchRegistry.sol:MatchRegistry",
        "label": "_candidatesForMatch",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}